<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSharpServerFramework</name>
    </assembly>
    <members>
        <member name="T:CSharpServerFramework.CSServer">
            <summary>
            一个并发的服务器框架
            使用Tcp协议通讯，所有Socket传输通过异步调用实现
            通讯的数据协议可以自定义
            服务端可以拓展多个Extension，不同的Extension处理服务端接收的不同数据
            客户端发送过来的数据必须包括指定的Extension的处理方法，Extension通过反射机制将相关的数据解析后传递给相关的Extension的相关方法进行处理
            服务端在接收和发送会处理数据包的包头，包头的定义是一个整形，代表包的长度（不包括包头数据长度），接收数据时会先接收包头再接收数据包，发送数据会先将数据包插入一个包头再发送
            服务端配置数据在静态类CSServerBaseDefine,里面的数据是静态变量，可修改后再启动服务器
            </summary>
        </member>
        <member name="T:CSharpServerFramework.CSServer.CSServerState">
            <summary>
            服务端状态
            READY:服务端初始化完成，等待调用StartServer
            RUNNING:服务端运行中
            STOP:服务端停止
            </summary>
        </member>
        <member name="M:CSharpServerFramework.CSServer.#ctor">
            <summary>
            构造CSServer
            </summary>
            <param name="ExtensionLoaderBuilder">ExtensionLoader构造器</param>
            <param name="LoggerLoader">Logger加载器</param>
            <param name="ReceiveMessageFilter">自定义消息过滤器</param>
            <param name="UserFactory">自定义用户工厂</param>
            <param name="NetConfig">网络配置</param>
            <param name="BaseConfig">服务器基础配置</param>
        </member>
        <member name="M:CSharpServerFramework.CSServer.ServerInit">
            <summary>
            构造CSServer会调用
            </summary>
        </member>
        <member name="M:CSharpServerFramework.CSServer.ServerDispose">
            <summary>
            StopServer调用后调用
            </summary>
        </member>
        <member name="M:CSharpServerFramework.CSServer.StartServer">
            <summary>
            启动服务器
            </summary>
        </member>
        <member name="M:CSharpServerFramework.CSServer.AfterStartServerInit">
            <summary>
            调用StartServer后调用
            </summary>
        </member>
        <member name="M:CSharpServerFramework.CSServer.StartServer(System.Net.IPAddress,System.Int32)">
            <summary>
            启动服务器
            </summary>
            <param name="IP">绑定的IP</param>
            <param name="Port">监听的端口</param>
        </member>
        <member name="M:CSharpServerFramework.CSServer.StopServer">
            <summary>
            停止服务器
            </summary>
        </member>
        <member name="T:CSharpServerFramework.Buffer.BufferManager">
            <summary>
            缓存管理器
            负责分配和释放缓存
            </summary>
        </member>
        <member name="M:CSharpServerFramework.Buffer.BufferManager.AddNewBufferToList(System.UInt32)">
            <summary>
            扩充缓存区
            </summary>
            <param name="AddSize">扩充Buffer数量</param>
            <returns>扩充的第一个Buffer的在BufferList的索引</returns>
        </member>
        <member name="M:CSharpServerFramework.Buffer.BufferManager.GetFreeBuffer">
            <summary>
            获取空闲缓存
            </summary>
            <returns>缓存实例</returns>
        </member>
        <member name="T:CSharpServerFramework.Buffer.CSServerBuffer">
            <summary>
            缓存
            </summary>
        </member>
        <member name="P:CSharpServerFramework.Buffer.CSServerBuffer.Id">
            <summary>
            获取Buffer的Id
            </summary>
        </member>
        <member name="P:CSharpServerFramework.Buffer.CSServerBuffer.Buffer">
            <summary>
            Buffer节点的数据
            </summary>
        </member>
        <member name="P:CSharpServerFramework.Buffer.CSServerBuffer.BufferLength">
            <summary>
            获取或设置单个Buffer节点的实际数据长度
            </summary>
        </member>
        <member name="P:CSharpServerFramework.Buffer.CSServerBuffer.IsUsing">
            <summary>
            Buffer是否在使用
            </summary>
        </member>
        <member name="T:CSharpServerFramework.Client.ClientAcceptQueue">
            <summary>
            Accept的队列
            </summary>
        </member>
        <member name="T:CSharpServerFramework.Client.ClientManager">
            <summary>
            连接客户端管理器
            </summary>
        </member>
        <member name="M:CSharpServerFramework.Client.ClientManager.#ctor">
            <summary>
            用户连接的客户端Socket管理
            </summary>
            <param name="UserFactory">默认自定义用户实例的工厂</param>
        </member>
        <member name="M:CSharpServerFramework.Client.ClientManager.Init">
            <summary>
            初始化管理器
            </summary>
        </member>
        <member name="M:CSharpServerFramework.Client.ClientManager.Stop">
            <summary>
            停止管理器
            </summary>
        </member>
        <member name="M:CSharpServerFramework.Client.ClientManager.PushClient(System.Net.Sockets.TcpClient)">
            <summary>
            添加新Accept的Client
            </summary>
            <param name="Client"></param>
        </member>
        <member name="M:CSharpServerFramework.Client.ClientManager.CheckClientIsDisconnected(CSharpServerFramework.Client.CSServerClientBase)">
            <summary>
            检测客户端是否已经断开
            </summary>
            <param name="Client">要检测的客户端</param>
            <returns>断开为ture</returns>
        </member>
        <member name="M:CSharpServerFramework.Client.ClientManager.CheckSessionIsDisconneted(CSharpServerFramework.Client.UserSession)">
            <summary>
            判断用户是否已经离线
            </summary>
            <param name="User">用户基类</param>
            <returns>断开为ture</returns>
        </member>
        <member name="M:CSharpServerFramework.Client.CSServerClientBase.#ctor(System.Net.Sockets.TcpClient,System.UInt64,CSharpServerFramework.Client.UserSession,System.UInt32)">
            <summary>
            CSServer管理的Client
            封装了TcpClient
            </summary>
            <param name="Client">Accept的TcpClient</param>
            <param name="Id">分配给该Client的Id</param>
            <param name="UserInfo">用户信息</param>
            <param name="NotValidateRecvTimeOut">认证超时，在次时间内没有发认证信息断开连接，释放资源</param>
        </member>
        <member name="T:CSharpServerFramework.Client.UserSession">
            <summary>
            服务器用户信息基础类，根据业务不同继承此类
            </summary>
        </member>
        <member name="P:CSharpServerFramework.Client.UserSession.Client">
             <summary>
            CSServer管理使用的Client
             </summary>
        </member>
        <member name="M:CSharpServerFramework.Client.UserSession.#ctor">
            <summary>
            UserSession构造，ID号生成由业务决定,-1表示未登录用户
            </summary>
            <param name="UserId">用户在业务中唯一的ID号，ClientManager会根据该UserId使用简单容器存储UserSession实例，并
            提供接口GetUserByUserId通过该唯一ID号返回对应的UserSession实例或子类的实例，-1规定表示未进行用户验证的用户</param>
        </member>
        <member name="P:CSharpServerFramework.Client.UserSession.WorkThreadId">
            <summary>
            工作线程ID
            </summary>
        </member>
        <member name="P:CSharpServerFramework.Client.UserSession.IsSessionNotValidate">
            <summary>
            该用户是未认证用户
            </summary>
        </member>
        <member name="T:CSharpServerFramework.Extension.ExtensionBase">
            <summary>
            Extension基类
            </summary>
        </member>
        <member name="T:CSharpServerFramework.Extension.ExtensionBase.ExtensionHandleMessageDelegate">
            <summary>
            处理消息委托
            </summary>
            <param name="User">用户</param>
            <param name="Object">参数</param>
        </member>
        <member name="M:CSharpServerFramework.Extension.ExtensionBase.AsyncMessageHandler(CSharpServerFramework.Extension.ExtensionBase,CSharpServerFramework.ICSharpServerSession,System.Object,System.Reflection.MethodInfo)">
            <summary>
            异步处理消息方法
            </summary>
            <param name="Extension"></param>
            <param name="Session"></param>
            <param name="Obj"></param>
            <param name="Method"></param>
        </member>
        <member name="M:CSharpServerFramework.Extension.ExtensionBase.AsyncMessageHandlerCallback(System.IAsyncResult)">
            <summary>
            异步调用回调函数
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:CSharpServerFramework.Extension.ExtensionBase.#ctor(CSharpServerFramework.ExtensionBaseEx)">
             <summary>
             CSharpServer 的Extension基类
             </summary>
            <param name="Extend">拓展代理</param>
        </member>
        <member name="M:CSharpServerFramework.Extension.ExtensionBase.SendResponse(CSharpServerFramework.ICSharpServerSession,CSharpServerFramework.Message.SendMessage)">
            <summary>
            发送消息给单个用户
            </summary>
            <param name="UserInfo">消息接收的用户</param>
            <param name="Message">消息体</param>
        </member>
        <member name="M:CSharpServerFramework.Extension.ExtensionBase.SendResponseToUsers(System.Collections.Generic.IEnumerable{CSharpServerFramework.ICSharpServerUser},CSharpServerFramework.Message.SendMessage)">
            <summary>
            发送消息给多个用户
            </summary>
            <param name="Message">消息体</param>
        </member>
        <member name="M:CSharpServerFramework.Extension.ExtensionBase.Log(System.String)">
            <summary>
            记录日志
            </summary>
            <param name="LogMessage">日志内容</param>
        </member>
        <member name="T:CSharpServerFramework.Extension.ExtensionManager">
            <summary>
            Extension管理器
            负责加载Extension，重定向消息
            </summary>
        </member>
        <member name="M:CSharpServerFramework.Extension.ServerBaseExtensions.HandleUnknowCommand.HandleUnknowCommand(System.String,System.Int32,CSharpServerFramework.Client.UserSession,System.Byte[],System.Int32)">
            <summary>
            处理客户端发送的未知的消息
            </summary>
            <param name="UnknowExtensionName">未知的Extension名</param>
            <param name="UnknowCommandId">未知的CommandId</param>
            <param name="SendMessageUser">发送的用户</param>
            <param name="Data">发送的数据流</param>
            <param name="DataLength">数据流长度</param>
        </member>
        <member name="T:CSharpServerFramework.Extension.ServerBaseExtensions.UnknowCommandExtensionBase">
            <summary>
            未知消息处理Extension
            继承此类，并用IExtensionLoader加载进CSServer可以自定义处理未知消息，否则CSServer以异常的方式抛出未知的命令的信息并用Logger记录
            子类需要指定类的ExtensionInfo特征属性
            </summary>
        </member>
        <member name="T:CSharpServerFramework.Log.CSServerLogger">
            <summary>
            记录器
            启动一条线程进行Log记录
            </summary>
        </member>
        <member name="T:CSharpServerFramework.Message.MessageManager">
            <summary>
            消息管理器
            主要负责处理接收的信息和发送信息到客户端
            </summary>
        </member>
        <member name="M:CSharpServerFramework.Message.MessageManager.#ctor">
            <summary>
            构造消息管理器
            </summary>
            <param name="ReceiveMessageCreator">处理接收到的数据包的消息构造器</param>
        </member>
        <member name="M:CSharpServerFramework.Message.MessageManager.PushSendMessage(CSharpServerFramework.Message.ICSharpServerMessageData)">
            <summary>
            将要发送的的消息传递到发送队列，并试图唤醒消息发送线程
            </summary>
            <param name="Message">要发送的消息,可以是SendUserMessage,也可以是SendUsersMessage</param>
        </member>
        <member name="M:CSharpServerFramework.Message.MessageManager.RegistClient(CSharpServerFramework.Client.CSServerClientBase)">
            <summary>
            异步开始接收Client的发过来的数据
            </summary>
            <param name="Client">客户端</param>
            <returns></returns>
        </member>
        <member name="M:CSharpServerFramework.Message.MessageManager.DoReveivePackageHead(System.IAsyncResult)">
            <summary>
            包头接收处理
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:CSharpServerFramework.Message.MessageManager.DoClientLoopReceiveCallback(System.IAsyncResult)">
            <summary>
            实际数据包接收处理
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:CSharpServerFramework.Message.MessageManager.Stop">
            <summary>
            停止消息服务器线程
            </summary>
        </member>
        <member name="T:CSharpServerFramework.Message.MessageQueueBase">
            <summary>
            消息队列基类
            </summary>
        </member>
        <member name="T:CSharpServerFramework.Message.ReceiveMessage">
            <summary>
            接收的数据
            </summary>
        </member>
        <member name="P:CSharpServerFramework.Message.ReceiveMessage.ReceiveDataBuffer">
            <summary>
            获取或设置接收到的数据缓存
            </summary>
        </member>
        <member name="P:CSharpServerFramework.Message.ReceiveMessage.MessageObject">
            <summary>
            反序列化后的消息实体
            </summary>
        </member>
        <member name="P:CSharpServerFramework.Message.SendUserMessage.Client">
            <summary>
            接收服务端发送信息的Client
            </summary>
        </member>
        <member name="M:CSharpServerFramework.Message.SendUserMessage.#ctor(System.Byte[],System.Int32)">
            <summary>
            构造SendMessage
            </summary>
            <param name="Data">数据包</param>
            <param name="Length">数据包长度</param>
        </member>
        <member name="T:CSharpServerFramework.Message.SendUsersMessage">
            <summary>
            发送给多个用户的消息
            </summary>
        </member>
        <member name="M:CSharpServerFramework.Message.SendUsersMessage.#ctor(System.Byte[],System.Int32)">
            <summary>
            构造SendMessage
            </summary>
            <param name="Data">数据包</param>
            <param name="Length">数据包长度</param>
        </member>
        <member name="T:CSharpServerFramework.Server.CommunicateAsyncState">
            <summary>
            通讯异步调用的附带数据
            </summary>
        </member>
        <member name="T:CSharpServerFramework.Server.CSServerAsyncState">
            <summary>
            服务器异步调用的附带数据
            </summary>
        </member>
        <member name="T:CSharpServerFramework.Server.CSServerBaseDefine">
            <summary>
            服务器的基本定义
            </summary>
        </member>
        <member name="F:CSharpServerFramework.Server.CSServerBaseDefine.BUFFER_SIZE">
            <summary>
            Buffer的长度，单位byte
            </summary>
        </member>
        <member name="F:CSharpServerFramework.Server.CSServerBaseDefine.WORKER_THREAD_MAX">
            <summary>
            工作线程数量
            </summary>
        </member>
        <member name="F:CSharpServerFramework.Server.CSServerBaseDefine.TCP_PACKAGE_HEAD_SIZE">
            <summary>
            包头长度
            </summary>
        </member>
        <member name="F:CSharpServerFramework.Server.CSServerBaseDefine.TIME_OUT">
            <summary>
            网络通信超时时间，毫秒
            </summary>
        </member>
        <member name="F:CSharpServerFramework.Server.CSServerBaseDefine.DEFAULT_BUFFER_LIST_SIZE">
            <summary>
            初始化缓存数量
            </summary>
        </member>
        <member name="F:CSharpServerFramework.Server.CSServerBaseDefine.MAX_BUFFER_SIZE">
            <summary>
            最大缓存数
            </summary>
        </member>
        <member name="P:CSharpServerFramework.Server.CSServerStatistics.MaxThroughoutRate">
            <summary>
            吞吐率
            </summary>
        </member>
        <member name="M:CSharpServerFramework.Util.BitUtil.CreateDataPackageWithHead(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            封装包头到字节流
            </summary>
            <param name="DataWithHead">封装包头的容器</param>
            <param name="Data">数据流</param>
            <param name="Length">数据流长度</param>
            <returns>封装后总长度</returns>
        </member>
        <member name="E:CSharpServerFramework.Util.CommandListener.OnCommandCall">
            <summary>
            新命令传递进来触发
            </summary>
        </member>
        <member name="M:CSharpServerFramework.Util.CommandListener.StartListener(System.Int32)">
            <summary>
            开启命令监听
            </summary>
            <param name="Port"></param>
        </member>
        <member name="P:CSharpServerFramework.Util.CommandArgs.Args">
            <summary>
            外部传递的参数数组
            </summary>
        </member>
        <member name="T:CSharpServerFramework.WorkThread.WorkerTask">
            <summary>
            工作线程的任务
            </summary>
        </member>
        <member name="P:CSharpServerFramework.WorkThread.WorkerTask.Handler">
            <summary>
            处理本任务的Extension
            </summary>
        </member>
        <member name="P:CSharpServerFramework.WorkThread.WorkerTask.Message">
            <summary>
            本任务的消息
            </summary>
        </member>
        <member name="P:CSharpServerFramework.WorkThread.WorkerTask.Session">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="P:CSharpServerFramework.WorkThread.WorkerTask.IsOrderTask">
            <summary>
            顺序的任务，先请求的先响应
            </summary>
        </member>
        <member name="P:CSharpServerFramework.WorkThread.WorkerTask.Command">
            <summary>
            处理Message的Command
            </summary>
        </member>
        <member name="M:CSharpServerFramework.WorkThread.WorkerTask.DoWork">
            <summary>
            调用Extension的相应的方法处理消息
            </summary>
        </member>
        <member name="T:CSharpServerFramework.WorkThread.WorkThreadManager">
            <summary>
            工作线程管理器
            工作线程是调用相关的Extension处理接收请求的数据的线程
            该管理器维护线程的数组，工作线程数至少有一个，最多根据配置增加
            每一个工作线程有一个任务队列
            </summary>
        </member>
        <member name="P:CSharpServerFramework.WorkThread.WorkThreadManager.RunningWorkerThreadCount">
            <summary>
            工作者线程数
            </summary>
        </member>
    </members>
</doc>
