<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSharpServerFrameworkAbstract</name>
    </assembly>
    <members>
        <member name="T:CSharpServerFramework.Extension.ExtensionInfoAttribute">
            <summary>
            作用于ExtensionBase类的Attribute，指定Extension的名，必须保证ExtensionLoader返回的所有Extension的Name不一样
            </summary>
        </member>
        <member name="T:CSharpServerFramework.Extension.ValidateExtensionAttribute">
            <summary>
            把Extension 指定为Validation类型
            Session认证前所有的请求都会转发到包含该标签的Extension
            </summary>
        </member>
        <member name="T:CSharpServerFramework.Extension.CommandInfoAttribute">
            <summary>
            Extension的命令Attribute，用于指定Extension子类的方法的命令Id，该Attribute只能作用于方法
            </summary>
        </member>
        <member name="M:CSharpServerFramework.Extension.CommandInfoAttribute.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            特征构造
            isAcceptRawData为true，方法定义为 void fun(ICSharpServerSession session, byte[] buffer)，buffer 为Client发送的完整数据包（包括包头，route信息）
            isAcceptRawData为false，方法定义为 void fun(ICSharpServerSession session, dynamic msg)
            </summary>
            <param name="CommandId">分配的Id，同一个Extension里CommandId必须不同</param>
            <param name="Name">命令名，要求同上</param>
            <param name="AsyncInvoke">指定Command是否使用异步方式调用，默认使用同方式调用。如果Extension子类的方法存在死循环或方法阻塞时间长，请设置改值为真，改为异步调用</param>
            <param name="OrderCommand">有顺序的命令，先请求的先响应,AsyncInvoke参数必须是false有效</param>
            <param name="isAcceptRawData">方法是否接受byte[]类型的参数</param>
        </member>
        <member name="M:CSharpServerFramework.Extension.CommandInfoAttribute.#ctor(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            特征构造
            isAcceptRawData为true，方法定义为 void fun(ICSharpServerSession session, byte[] buffer)，buffer 为Client发送的完整数据包（包括包头，route信息）
            isAcceptRawData为false，方法定义为 void fun(ICSharpServerSession session, dynamic msg)
            </summary>
            <param name="CommandId">分配的Id，同一个Extension里CommandId必须不同</param>
            <param name="AsyncInvoke">指定Command是否使用异步方式调用，默认使用同方式调用。如果Extension子类的方法存在死循环或方法阻塞时间长，请设置改值为真，改为异步调用</param>
            <param name="OrderCommand">有顺序的命令，先请求的先响应,AsyncInvoke参数必须是false有效</param>
            <param name="isAcceptRawData">方法是否接受byte[]类型的参数</param>
        </member>
        <member name="M:CSharpServerFramework.Extension.CommandInfoAttribute.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            特征构造
            isAcceptRawData为true，方法定义为 void fun(ICSharpServerSession session, byte[] buffer)，buffer 为Client发送的完整数据包（包括包头，route信息）
            isAcceptRawData为false，方法定义为 void fun(ICSharpServerSession session, dynamic msg)
            </summary>
            <param name="Name">命令名，同一个Extension里CommandId必须不同</param>
            <param name="AsyncInvoke">指定Command是否使用异步方式调用，默认使用同方式调用。如果Extension子类的方法存在死循环或方法阻塞时间长，请设置改值为真，改为异步调用</param>
            <param name="OrderCommand">有顺序的命令，先请求的先响应,AsyncInvoke参数必须是false有效</param>
            <param name="isAcceptRawData">方法是否接受byte[]类型的参数</param>
        </member>
        <member name="T:CSharpServerFramework.Message.MessageBase">
            <summary>
            消息基类
            每一个消息都带有一个ExtensionName和CommandId，代表处理消息的Extension和处理的方法
            消息的UserInfo代表了消息来源的User或消息接收的用户
            </summary>
        </member>
        <member name="T:CSharpServerFramework.Message.SendMessage">
            <summary>
            发送的信息
            </summary>
        </member>
        <member name="M:CSharpServerFramework.Message.IDeserializeMessage.DeserializeMessage(System.Int32,System.Byte[],System.Int32)">
            <summary>
            根据CommandId处理客户端发送的数据，返回数据实体，数据实体最终会传递给具体的Extension的对应CommandId的方法
            </summary>
            <param name="CommandId">处理消息的函数Id</param>
            <param name="ReceivedData">数据流</param>
            <param name="Length">数据流长度</param>
            <returns></returns>
        </member>
        <member name="T:CSharpServerFramework.Message.IUseMessageRouter">
            <summary>
            使用Router
            </summary>
        </member>
        <member name="T:CSharpServerFramework.Message.MessageRoute">
            <summary>
            服务端接收到的消息的路由信息
            </summary>
        </member>
        <member name="P:CSharpServerFramework.Message.MessageRoute.ExtName">
            <summary>
            获取或设置处理消息的Extension名
            </summary>
        </member>
        <member name="P:CSharpServerFramework.Message.MessageRoute.CmdId">
            <summary>
            获取或设置处理消息的Extension的命令Id
            </summary>
        </member>
        <member name="P:CSharpServerFramework.Message.MessageRoute.CmdName">
            <summary>
            获取或设置处理消息的Extension的命令名，与CmdId类似
            </summary>
        </member>
        <member name="T:CSharpServerFramework.CSServerException">
            <summary>
            服务器的异常
            </summary>
        </member>
        <member name="M:CSharpServerFramework.IGetServerConfig.GetBufferSize">
            <summary>
            Buffer的长度，单位byte
            </summary>
        </member>
        <member name="M:CSharpServerFramework.IGetServerConfig.GetWorkerThreadCount">
            <summary>
            工作线程数量
            </summary>
        </member>
        <member name="M:CSharpServerFramework.IGetServerConfig.GetNetTimeOut">
            <summary>
            网络通信超时时间
            </summary>
            <returns>毫秒数</returns>
        </member>
        <member name="M:CSharpServerFramework.IGetServerConfig.GetBufferInitCount">
            <summary>
            缓存初始化数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpServerFramework.IGetServerConfig.GetBufferAddPerTimeCount">
            <summary>
            缓存每次增加的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpServerFramework.IGetServerConfig.GetValidateTimeout">
            <summary>
            认证超时
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpServerFramework.IGetNetConfig.GetListenPort">
            <summary>
            服务器监听的接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpServerFramework.IGetNetConfig.GetMaxListenConnection">
            <summary>
            服务器最大连接数
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpServerFramework.IGetNetConfig.GetServerBindIP">
            <summary>
            服务器监听的IP
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpServerFramework.ICSharpServerUser">
            <summary>
            自定义用户实体
            </summary>
        </member>
        <member name="P:CSharpServerFramework.ICSharpServerUser.IsUserValidate">
            <summary>
            返回用户是否通过服务器验证
            </summary>
        </member>
        <member name="P:CSharpServerFramework.ICSharpServerUser.Session">
            <summary>
            注册后Session会被框架赋值
            实现此属性即可
            </summary>
        </member>
        <member name="T:CSharpServerFramework.ICSharpServerSession">
            <summary>
            连接CSharpServer的会话状态接口
            可以自定User信息
            </summary>
        </member>
        <member name="P:CSharpServerFramework.ICSharpServerSession.User">
            <summary>
            注册后的的User实体
            </summary>
        </member>
        <member name="M:CSharpServerFramework.ICSharpServerSession.RegistUser(CSharpServerFramework.ICSharpServerUser)">
            <summary>
            注册当前会话的用户实体
            一般在验证拓展里调用
            </summary>
            <param name="User"></param>
            <returns></returns>
        </member>
    </members>
</doc>
